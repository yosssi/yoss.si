package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _views_base_ace = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x41\x6f\xdb\x3a\x0c\xbe\xf7\x57\x08\x3d\x3c\xdb\x0f\x8e\xfc\x82\xf6\x50\xbc\x40\x87\x76\x1b\x7a\x18\xd0\xf5\xb0\x0d\x18\x82\x60\x60\x6c\x46\x56\x26\x4b\x9e\x24\xd7\x35\x9c\xfe\xf7\x49\x72\x1a\x77\x2d\x86\x5d\x64\x89\xfc\xf8\x91\xfc\x28\x99\x91\x4a\x97\x6e\x68\x91\xd4\xae\x91\x67\x67\x61\x25\x12\x14\x67\xa8\xce\x08\xa9\x11\x2a\xff\x21\xa4\x41\x07\xa4\xac\xc1\x58\x74\xac\x73\xbb\xc5\xd5\x6c\x56\xd0\x20\x7b\x10\xd8\xb7\xda\x38\x52\x6a\xe5\x50\x39\xd6\x8b\xca\xd5\xac\xc2\x07\x51\xe2\x22\x1e\xf2\xce\xa2\x59\xd8\x12\x24\x6c\x25\x32\xa5\xf3\x06\x1e\x45\xd3\x35\xd1\x86\x6c\x19\x29\x9d\x70\x12\xc9\x37\x6d\xad\x15\xd1\x20\x85\xfa\x41\x6a\x83\x3b\x26\x1a\x5e\xec\xc0\x13\x6a\x45\xfd\x42\x0c\x4a\x76\x6e\x6b\x6d\xca\xce\x91\x60\x3d\x7f\x15\x50\x5a\x5b\x58\x37\x48\xa4\x7e\xe7\x8b\xad\x04\x30\x90\x32\x06\x46\xbb\xad\x11\x1d\x09\xfd\x33\x87\x8f\xae\xf0\x30\x4f\xb1\xd5\xd5\x10\x99\x42\xfb\x68\xe2\x96\x10\x3a\x9d\x16\xc7\x06\x8f\x56\x0f\x5a\x9e\xb6\x84\xc0\x94\xb8\x78\xd9\x80\xc5\xd2\x09\xad\x9e\x69\x02\xfb\x1b\x12\x46\x06\x81\xb2\x22\x0d\x88\x09\xb8\xd3\xda\xcd\xa9\xa7\xd3\x9b\xa8\xf6\x45\xe6\x03\x79\x67\x10\x1c\x56\x64\x3b\xfc\xa3\xb6\xb6\x5d\xbd\x2d\xab\x76\xae\xb5\xff\x17\x85\xeb\x85\xf3\x7c\xb4\xd4\x4d\xf1\x7d\x88\x95\x92\x8f\x28\xf6\x22\x94\x5d\x8b\x0a\xfe\x90\xe1\x5e\xf7\x68\xfe\x9a\xc1\x27\xe0\x3a\xdc\x21\xaa\x0d\x2f\xc8\xad\xfe\x8d\x63\x8a\x1c\x47\xfa\x15\x8d\xf5\xb2\x3c\x3d\x45\xf7\x38\x8a\x1d\xa1\xf7\x46\x57\x5d\x54\xeb\x68\x0e\xca\xec\xe1\x01\x6c\x69\x44\x3b\x37\x9e\xee\x3a\x15\x61\xa9\xc8\x6d\xae\x73\x9e\x9b\x1c\xf2\x26\x1b\xc5\x3a\xb9\xd5\x9a\x4b\xbc\x56\x20\x07\x27\x4a\xfb\x69\xbb\xf7\xfa\x27\x1b\x66\x56\x62\x6d\x36\x2c\x2c\x87\xc3\x29\x3e\x1b\x67\xd2\xe0\xa2\x3f\xd9\xf4\x39\x1c\xd6\x9b\x8c\xb6\x9d\xad\x53\x30\xbc\x6b\xbc\xee\x36\x3b\x61\x9f\xf2\x88\x92\x6c\xf9\xaf\xc2\x9e\xbc\xf7\xc2\xa7\xd9\x0a\x98\xa5\x65\x9c\xc2\x07\x89\x21\x22\xd5\x59\x7e\x8a\x69\xbc\x97\xa3\x3b\xba\xec\xcd\xf0\x19\xf8\x9d\x7f\x3b\x1e\xb4\xfe\x6f\xb3\x02\x0a\x76\x50\x25\x5b\xfa\x9d\x35\x25\xe3\xab\x86\xb6\x60\x3c\xf4\x4e\x57\x48\x85\xf2\xaf\xc7\xdd\xe0\x4e\x1b\x4c\x43\xaf\x73\x2d\x59\xda\x0b\x55\xe9\x3e\xf7\x6f\x39\x16\x9a\x27\x93\x5e\x49\x9e\x14\x45\xdf\xf7\x94\x47\x4d\x16\xf0\x2c\x4a\x9c\xfc\x7c\xda\x5b\x8f\xe4\x90\x64\xf3\x44\x39\xa4\xc9\xd4\x4a\x92\x93\xe4\xcb\xf5\xe2\xf2\xf2\x6a\x79\x71\x71\x71\xb5\x58\x06\x43\xb8\x34\xd4\x8a\xd7\x11\x16\x55\x15\xdc\x2d\x70\x0c\x7f\x84\x67\xff\x38\x7a\x87\x1f\xe9\xaf\x00\x00\x00\xff\xff\xbe\x7c\xe9\x42\x6f\x04\x00\x00")

func views_base_ace_bytes() ([]byte, error) {
	return bindata_read(
		_views_base_ace,
		"views/base.ace",
	)
}

func views_base_ace() (*asset, error) {
	bytes, err := views_base_ace_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "views/base.ace", size: 1135, mode: os.FileMode(420), modTime: time.Unix(1410970863, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _views_top_index_ace = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\x16\x3e\x7c\xdf\xa5\x16\x1d\xd5\x01\x82\x34\x31\x9a\x1a\x88\xd3\x1f\x03\x0e\x22\x20\xe8\xa9\xa0\xe4\x15\xc5\x4a\xe2\xaa\x24\x05\xc1\x40\x1f\xbe\x2b\x4a\x4e\xdd\xc2\x45\x92\x83\x44\x71\xb8\x33\x1a\x0e\xb9\xd7\x90\x91\xf1\x68\x3c\xd4\x52\x9b\x09\x40\x11\xc3\x4d\x4a\xad\xe7\xcf\xb6\xe2\x17\x40\xa5\xe1\x33\xea\xef\x1a\xbe\x92\x2b\xf4\x4e\x1e\xc0\xad\x25\x65\x65\x5d\xa3\x05\x01\x6b\x3a\xc0\x09\x95\x7b\x7a\x03\x9f\x64\x23\xcd\x88\x85\x01\x40\x42\x61\x31\xbf\x2e\xbc\x6f\xdc\xa5\x10\x4a\xfb\xa2\x4d\xa3\x8c\x6a\xb1\x27\xe7\x9c\x86\xb5\xf6\x77\x6d\x3a\x56\x3b\xe6\xc3\x7f\x26\x75\xcd\x3b\x31\x0c\xa7\x65\x7c\xa7\xbd\x47\x1b\x74\xbe\x8d\x42\xc9\x80\xbd\x52\xa9\xeb\xba\x28\x97\x19\xa6\x44\xe5\x91\xad\x8b\x05\xdc\x8e\xe8\xc9\xfd\x70\x70\x95\xa7\xcb\xfd\x90\x4e\x54\xf6\x59\x45\x17\x8b\xf7\xaa\x5f\xe8\x75\xe0\xdf\x4b\x43\xe0\x8f\x64\x4b\x77\x1c\xf8\x0b\x03\x13\x6c\x0b\x6e\xf8\x99\xc1\x5d\xb2\xf9\x02\x09\xd6\x4d\x25\x3d\x02\x1a\xa5\x0d\x42\x4e\xf6\xf7\xc1\xbc\x54\x53\x65\xce\xc1\x7a\xf5\xf0\xc0\xaa\xdb\xd6\x22\x2b\x40\x3f\xdb\x5a\x6c\x2c\x65\xe8\x1c\xd9\xd7\x4a\xd6\x3f\x60\xbd\xb9\x3f\x12\xdc\xdc\x27\x09\xac\x2a\xcd\x17\x6f\x88\xe0\x43\x45\xea\xf9\x04\x52\xae\x8a\x7a\xd1\xc8\x85\xeb\xc8\xe2\xff\xbb\x03\xb7\x88\x27\x7f\x51\xfa\xdb\x21\xab\xd2\x3d\x51\x92\x7e\x76\xe2\x37\x3f\xe1\x6a\xa4\x4d\x47\x9e\xab\xf4\x0e\x9f\x88\x42\x11\xb7\x89\xa8\xa5\xf5\xda\xe8\xa8\xf0\x75\x35\x5d\x6e\x86\x19\xef\xea\x11\x53\xc8\xb9\x15\xb0\xe3\x83\x1c\x53\xbf\x12\x72\xc9\x7d\xf1\xf6\x0c\x36\x72\x0f\xf1\xfc\x6c\x11\xba\x04\x56\x64\x72\xb4\x68\xf8\xd4\x02\xe8\x1a\xab\x8d\x7a\xce\xce\x1f\xdb\x10\x4c\x3c\x17\xf3\x38\x9e\xcf\x14\xd1\x6e\xd6\xc8\xac\x94\x0a\xa3\xe0\x79\xba\x4c\x74\xe3\x82\x89\x95\x45\xc9\x0e\x15\x47\xb2\xe6\x3a\xd8\x0e\x75\xa3\xb3\x78\x0e\xb7\x98\xda\x56\xda\x60\xef\x3c\xd8\x6b\x0a\xb4\xec\xf0\xa3\xd9\x69\x19\xd0\xc9\xaf\x00\x00\x00\xff\xff\x2a\xa8\x62\x7b\x21\x04\x00\x00")

func views_top_index_ace_bytes() ([]byte, error) {
	return bindata_read(
		_views_top_index_ace,
		"views/top/index.ace",
	)
}

func views_top_index_ace() (*asset, error) {
	bytes, err := views_top_index_ace_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "views/top/index.ace", size: 1057, mode: os.FileMode(420), modTime: time.Unix(1425653882, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _public_css_all_min_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xdd\x6a\xe3\x3c\x10\x7d\x15\x43\xf9\x68\x0b\xa3\x90\x38\x5f\xda\x20\xdf\x74\xef\xf6\x35\x64\x6b\x1c\x0d\xd1\x8f\x91\xe4\x34\x5d\xe3\x77\x5f\xf9\x27\xc5\x59\x6f\xbb\x08\x6c\xa1\x33\x3a\x33\x73\xce\xe8\xad\x52\xc2\x07\x8c\xd9\x63\x5b\x47\x76\x7c\x2c\x04\x94\x4e\x7e\x40\xd9\xc6\xe8\x2c\x48\x09\x92\x2e\x20\x35\xc8\x08\xb5\x73\x11\x7d\xfa\x79\x03\x6a\x07\x2a\x07\xb5\x07\xf5\x3f\xa8\x03\xa8\x17\x50\x28\x64\x42\xc9\x9c\x80\x6c\xd3\x46\xd0\x04\x0d\x04\xac\x22\x25\xa2\x80\x3a\xed\x20\xe2\x35\x0a\x8f\x02\x5a\x0d\x17\x92\xe8\x3a\x23\xfc\x89\x2c\xdf\x16\x8d\x90\x92\xec\x89\x6f\x7b\x15\x8d\xee\x6a\x67\x23\xab\x85\x21\xfd\xc1\x7f\xa2\xbe\x60\xa4\x4a\xc0\x0f\x4f\x42\x43\x10\x36\xb0\x80\x9e\xea\x62\x0c\x0b\xf4\x0b\xf9\x6e\xbb\xfd\xaf\xd0\x64\x91\x29\xa4\x93\x8a\x7c\xb7\x39\x14\xb7\x6d\xc2\xfa\xa1\xaf\xce\x90\x65\x8b\xc3\xbb\x00\xb5\xeb\x16\x74\x9b\x83\x47\x53\x54\x4e\x3b\xcf\x1f\xf6\xaf\x07\x14\x65\xaf\xf2\xbb\x88\x7c\x15\x51\x4c\xed\xb0\xd2\x25\xf9\x0c\x1f\x39\x7a\xb5\x5f\xde\x5a\xb3\x8a\xee\x9e\x63\x10\x89\x49\xac\x9c\x17\x83\x76\xdc\x3a\x8b\xbd\xe0\xca\x5d\xd0\x77\x7f\x82\xad\x4d\xaa\x0f\x6d\xf7\xad\x9e\xc5\x64\x1a\xeb\x38\x37\xd0\xcf\xa6\x4d\xee\x64\xcd\xa2\x92\xcd\x71\xc0\x37\x13\xc2\xaa\x74\x8e\x36\x76\x37\x1b\x76\x23\x38\x68\xb6\x82\xb6\xd9\x1a\xcc\x54\x9e\xea\x8c\x4f\xbc\x26\x1f\x22\xab\x14\x69\xf9\x7c\xab\x27\xba\x66\xe6\x9b\xaa\xf9\x22\x59\xeb\x75\xf7\xee\xbc\x64\x65\x9a\x90\x33\x1f\xbf\x4c\x68\x5d\xac\x6a\x8e\x64\x30\x44\x61\xfe\xd2\x4e\x92\xe2\x1c\x32\x4d\x5d\x99\x98\x52\xaa\x31\x77\x73\xcd\x82\xd3\x24\xb3\x07\xb9\x1f\xd6\xe7\xb0\x4d\x1a\x7d\x5e\x9a\x35\x2e\x45\x75\x3e\x79\x97\xa4\x65\xb3\x33\xf5\x61\x58\x8b\x40\x2d\x6e\x5d\xde\x12\xcd\x96\xaf\x72\xf5\x9b\xe0\xaa\x34\xb5\x6c\x7a\x52\x61\x29\xca\x94\xfe\xcd\xa0\x24\x91\x85\xca\x23\xda\x4c\x58\x99\x3d\x0d\x63\xfa\x4e\x32\x2a\xfe\xfa\x72\x6c\xae\xcf\xdd\x57\x36\xe5\xdf\xd9\xb4\x06\xff\x69\x53\xfe\x9d\x4d\x23\xd8\xff\x0e\x00\x00\xff\xff\x7a\xfd\x40\x21\x33\x04\x00\x00")

func public_css_all_min_css_bytes() ([]byte, error) {
	return bindata_read(
		_public_css_all_min_css,
		"public/css/all.min.css",
	)
}

func public_css_all_min_css() (*asset, error) {
	bytes, err := public_css_all_min_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "public/css/all.min.css", size: 1075, mode: os.FileMode(420), modTime: time.Unix(1410970863, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _public_css_style_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xd1\x6e\xa3\x3a\x10\x7d\xf7\x57\x58\xaa\xae\xda\x2b\xe1\x88\x24\x9b\x36\x4b\x5e\xba\x6f\xfb\x1b\x06\x0f\xc1\xaa\xb1\x91\x3d\xa4\xed\xae\xf2\xef\x3b\x86\x90\xc0\x12\xb6\x8a\x46\xc4\xe3\xe3\xf1\x99\x33\xc7\xaf\x45\x25\x7d\x00\xe4\x8f\x6d\x89\x62\xff\x78\x60\xb9\x53\x9f\x09\xab\xd6\x14\x1b\x8a\x2d\xc5\x37\x8a\x1d\xc5\x73\xc2\x64\xc2\x74\x7d\x4c\x58\xe9\x7c\x4d\x7f\x6d\xd3\x22\x6d\x80\x54\xe0\x63\xd2\x61\xfc\x2a\x43\x41\x79\xa5\x12\x66\x74\xc2\x5a\x5a\x07\x30\x50\x60\xfc\x16\xa8\x9d\xa5\x4d\x7d\x4a\xd8\x49\x2b\x70\x09\x6b\x12\x96\xb7\x88\x31\x8d\xf0\x81\xd2\x83\xe4\xbf\x19\xe7\xb5\xf4\x47\x6d\x33\x9e\x1e\x68\xd1\x48\xa5\xb4\x3d\x76\xab\x33\xab\xb0\x36\x1d\xa6\x74\x16\x45\x29\x6b\x6d\x3e\x33\xfe\x13\xcc\x09\x50\x17\x32\xe1\x3f\xbc\x96\x26\xe1\x41\xda\x20\x02\x78\x5d\x1e\x06\x70\xd0\xbf\x20\xe3\xeb\x34\xfd\x2f\xa6\x8c\xb6\x20\x2a\xd0\xc7\x0a\x29\xb9\xda\xc5\xdc\x75\xd9\x61\xce\x9d\x26\x3d\x21\x6d\xc5\x74\x73\x0e\xae\xd6\x37\x5e\x97\xab\x56\x3b\x0f\x75\xc4\x16\xce\x38\x9f\xf1\x87\xed\xcb\x0e\x64\xde\xa1\x37\x73\xf4\x66\x01\x3d\x08\x22\x72\x47\x62\xd5\xa4\xc4\xa5\x30\x95\xd9\xce\xca\x2c\x5e\xd9\x6b\x3b\x2f\x1e\xa5\x17\x0a\x0a\xe7\x65\x1c\x51\xc6\xad\xb3\xd0\x1d\xc8\x2a\x77\x02\xdf\x1d\x9b\x81\x5a\x4b\xb3\x8f\x22\x46\x64\x6b\x46\x73\x13\x06\x4a\xbc\x75\x7f\xbe\xf8\x84\x37\x7f\x53\x4d\x57\xfb\x0b\xa2\x77\xd0\xf2\xfe\xaa\x2f\x21\x0a\xda\x04\x8b\x1d\xf0\xea\x8b\xf5\x00\x8a\xe3\xba\x0f\x49\x17\x40\xd5\x26\xb3\x0e\x9f\xb2\x52\xfb\x80\xa2\xa8\xb4\x51\xff\x8f\x3b\x41\xd7\x8c\xea\xf7\x2c\xbf\x20\xd1\xfa\x5e\x8b\x77\xe7\x95\xc8\xc9\xd1\x6f\x19\xef\x3e\x42\x1a\x73\x58\x6c\x10\x75\x0d\x01\x65\xfd\x0f\x91\x56\xa4\xf6\x5b\x20\xe3\x76\x90\x9c\xea\x13\x99\x9e\x61\xf3\xc1\x83\x33\x5a\xf1\x07\xb5\x8d\xbf\xe9\xbb\xb9\x0e\xe2\x5a\x61\x34\xd8\x5c\x16\x6f\x47\xef\x68\x9c\x62\xb0\x46\xb9\x8b\xbf\xe9\x01\x23\x07\x81\xc6\xb7\x0f\x86\xbc\x43\x80\x0e\x07\x57\xd0\x5b\x14\xfd\x13\x0f\x33\x5d\x6f\xbc\x5e\x6b\x50\x5a\xf2\x50\x78\x00\xcb\xa5\x55\xfc\x29\xbe\xb8\x77\xad\xb0\xca\xf8\xcb\xf3\xbe\xf9\xe8\xc7\x72\xcf\x07\xa3\x4e\x87\x07\x74\x8e\xd0\x99\x1b\x26\x7e\x58\x86\x2e\x7a\x62\xca\x7e\x52\xe0\x8e\x33\xee\xd2\xfa\xaa\xd5\xef\xfb\xb4\x6f\xf5\xcc\xfe\x04\x00\x00\xff\xff\x5e\xe2\x30\xe9\xa2\x05\x00\x00")

func public_css_style_css_bytes() ([]byte, error) {
	return bindata_read(
		_public_css_style_css,
		"public/css/style.css",
	)
}

func public_css_style_css() (*asset, error) {
	bytes, err := public_css_style_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "public/css/style.css", size: 1442, mode: os.FileMode(420), modTime: time.Unix(1410970863, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _public_css_style_styl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\x7f\x6b\xdb\x3c\x10\xfe\xdb\xfa\x14\x07\x2f\xef\xda\x81\x15\x9c\x64\x69\x33\xc3\xa0\x1d\x0c\xf6\x35\x64\xeb\x6c\x89\xc8\x92\x91\xe4\xb4\xdd\xa7\xdf\xc9\x4e\x52\x3b\x69\x97\x70\x48\xbe\xe7\x74\xbf\x9e\xbb\xca\x88\xfa\x00\x3f\xe0\xbf\x62\xfc\xb1\xca\x0c\x98\x3e\xb7\x8f\xbb\x5f\xcf\x3f\x99\xd1\xad\x8a\xad\x17\x6f\x49\x27\xb7\xe9\xcf\x5e\x94\x8e\x18\x3a\x77\x18\x0d\x9b\x5d\xfa\xb3\xc6\xd9\xc8\x1b\xd1\x69\xf3\x76\xff\x95\x65\xb3\x4f\xf8\x8d\xe6\x88\x51\xd7\x22\x87\x67\xaf\x85\xc9\x21\x08\x1b\x78\x40\xaf\x1b\xf6\x54\x2b\xe1\x03\x46\xb8\x1b\x9a\xc8\xf7\x77\xac\x72\xf2\x2d\x07\xb5\x26\xd9\x90\x6c\x49\xbe\x91\xec\x48\x1e\x72\x20\x1f\xba\x6b\x73\x68\x9c\xef\xe8\x6a\xfb\x21\x12\x80\x42\xa2\x4f\x4a\x17\xd3\x29\x29\x84\x24\xbd\x94\x39\x18\x9d\xc3\x90\x42\xa2\xc1\x3a\xa6\xb3\x8e\xda\x59\x02\xf5\x31\x87\xa3\x96\xe8\x72\xe8\x73\xa8\x86\x18\x93\x3a\xe2\x6b\x14\x1e\x05\xcb\x3a\xe1\x5b\x6d\xa1\x60\x59\x2f\xa4\xd4\xb6\xa5\xab\x8a\x9d\x59\x14\x77\xa9\x35\xe8\x3f\x08\xeb\xa2\xf8\x9f\x65\x46\x5b\xe4\x0a\x53\xe7\x60\xbd\xda\xb1\xec\x7c\x4f\x68\x2a\x8f\x7c\x6b\xcb\xe7\xda\x85\x89\x5a\x2f\x7c\xae\x76\x1e\x3b\x96\xd5\xce\x38\x0f\x89\x1e\xa6\x36\x4b\x83\xcd\xb5\xc1\x29\x77\x5e\x39\x2a\xaa\x83\x62\x72\xa1\xb6\xcb\x67\xc5\xf5\x33\xb1\x74\x92\x5a\xc1\x25\xd6\xce\x8b\xd4\x32\xb0\xce\x92\xf6\x4b\xa9\xdc\x11\x3d\xcb\x6e\xf0\xc1\x12\x0b\xa9\x78\x36\x98\x4b\x0a\x06\x9b\x78\xae\x61\xe2\x89\xfa\x49\x8f\xdf\x13\x29\x56\xfb\x04\x4e\xe4\xb1\x5b\x60\x35\x3d\xe3\x35\x01\x68\xe3\x3b\x1d\xeb\x11\x4d\x0d\xbd\xc5\x8a\x09\xcd\xd4\xa6\xb4\x2e\xde\x97\x8d\xf6\x21\xf2\x5a\x69\x23\x89\xb1\x73\x72\xd1\xf5\x27\x2f\x53\xf4\xcf\x62\x0c\x9e\x0a\x7a\x71\x5e\xf2\x8a\x46\xe3\x50\xc2\x78\x70\x61\xcc\x47\xf9\x46\xdd\x61\x88\xa2\xeb\x3f\x02\xa9\x3f\x87\x90\x66\x84\xb2\xa8\xc8\x23\x05\x1d\xb3\xe8\x5f\x21\x38\xa3\x25\x5c\x36\x8e\x0c\x2e\xd5\x9c\x66\x60\xd6\xfc\xac\xa2\xbd\x6d\xbd\xa3\xa6\xf3\x89\xb4\xf7\xb5\x1c\x0d\x8d\x38\x17\x3c\x5a\x4f\xa1\x4e\x03\xf1\x51\xb4\x55\x70\x35\x2d\x27\x9f\x16\x21\xb0\x59\x8f\xca\x73\x02\x4f\x1d\x4a\x2d\x20\xd4\x1e\xd1\x82\xb0\x12\xee\xd3\x24\xbf\x68\x19\x55\x09\x8f\x0f\xfb\xfe\x95\xba\x7b\x43\xd8\xa5\x8e\x69\x50\xaf\x28\x9b\x71\x36\xe1\x9f\x91\x36\x67\xed\xe4\xe9\x9a\xb6\x65\xa4\x7f\xa7\xfb\x7d\x5f\x8c\xe9\x8e\x3b\xfd\x37\x00\x00\xff\xff\x22\xc7\x10\x4d\x07\x05\x00\x00")

func public_css_style_styl_bytes() ([]byte, error) {
	return bindata_read(
		_public_css_style_styl,
		"public/css/style.styl",
	)
}

func public_css_style_styl() (*asset, error) {
	bytes, err := public_css_style_styl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "public/css/style.styl", size: 1287, mode: os.FileMode(420), modTime: time.Unix(1410970863, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _public_img_favicon_ico = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x0b\x50\x54\xe7\xf5\xbf\xff\x7f\x1f\x69\xd3\x99\xc6\xb4\xb5\x6d\xd2\xcc\x04\x6c\x6a\x48\x62\xd4\xc4\xba\x2c\x0f\x8d\x69\x3a\xb1\x0d\xbe\x82\x12\x04\x64\x97\x45\xa8\xb5\x9d\xbc\x6a\x4d\x27\x6d\x9a\x4e\x33\xb1\xa9\x8d\xd6\x99\x9a\x69\xd3\x24\x1a\x23\x8f\x65\x1f\xc0\x22\x20\x20\x2a\x12\x15\x04\x4c\x90\x22\x20\x41\x44\xa3\x86\xe2\x8b\xa0\x22\xc2\xba\x9e\x9e\x73\xbe\xbb\x97\x5d\x90\x75\x1f\xec\x0a\xed\x7e\x33\x87\xbb\xf7\x72\xbf\x7b\x7e\xdf\xf9\xce\x77\xbe\xf3\xf8\x24\xe9\xff\xa4\x2f\x48\x13\x26\xd0\x35\x44\xfa\xf9\x17\x25\x49\x25\x49\x52\x48\x88\xb8\xcf\xc1\xe7\x9b\xf1\xd9\xf4\xe9\xf2\xfd\x0f\x24\xe9\xc9\x89\x92\x14\x86\xef\x4c\xa0\xf7\x24\xf1\x7c\xa4\x66\xd6\x84\x67\x98\x34\xe1\xb9\x26\xad\xda\x84\x57\x67\xd2\x46\x22\x45\x0c\x7f\xae\x51\x19\xcc\x5a\x55\xa1\x49\xa3\xde\x68\x49\x51\x43\xd9\xcf\xa2\x61\x7b\x5a\x14\x94\xa4\x0f\xa1\xb4\x08\xa4\xc8\x61\xcf\x8b\x97\x47\x42\xc5\xca\x59\x80\xfd\xcf\xe2\xf7\x7a\x90\x6c\x48\xfd\x48\x56\x47\x32\x24\x4e\xb3\x1a\x97\xcd\xb0\x22\x36\xa7\xe7\x46\x4d\x78\x5f\x3e\xf2\x45\xec\x2d\x78\xdf\x9b\xab\x55\xe3\xb7\xc2\x05\xf1\x6f\x15\x18\x96\x4e\x81\x8e\x9a\x4a\xa8\xdd\xba\x11\xb2\xe6\x7d\x0d\x72\x53\x67\x0d\xbe\x83\xfc\x0a\x53\x23\xe8\xda\x76\xc3\xfe\xc9\x2a\xc8\x89\x9b\x0c\x97\xcf\x75\x41\xcb\x0e\x0b\x7c\xf0\x23\x09\x72\x97\x3f\xc6\xdf\xb5\xf7\xdf\xe6\xaa\x3f\xf1\x8f\x7f\x10\x2e\x7c\x7a\x0c\x0e\x17\x19\x20\xe3\x49\xec\x9f\x3a\xdb\x89\xbf\xcb\xfe\xda\x08\xc8\x5e\xf8\x6d\xe8\xe9\x3c\x05\x87\x8b\x8d\xf0\xc1\x1c\xec\x9f\xf6\x38\xe3\x72\xd9\x1f\xff\x4f\x38\xb3\xe6\x4f\x80\x3d\xeb\x5f\x06\x6a\x84\x81\xfe\x67\x4c\x7a\x04\xcc\x29\x51\x2e\xfa\xab\xc0\xac\x8b\x02\x43\xe2\x74\xc6\xd0\x77\xb1\x9b\xc7\xde\xd9\x7c\x08\x4e\x1c\xdc\x07\x5b\x9f\xb0\xcb\xe0\xc6\xfd\x71\x2e\xb8\x3f\x61\x3d\x5e\xb7\x17\x7a\xbb\xcf\x41\xe6\x53\x12\x14\xbf\x94\x04\xd6\xab\x7d\x50\xf5\xce\x5a\x45\x8e\xc6\x64\xd5\x90\xfe\xe1\x3c\x3f\x99\x31\x5f\xe1\xf9\xa2\xb6\x7b\xed\xaf\x41\xbf\xe4\x3e\xc8\xf8\xa9\x04\x0d\x96\x4c\xfe\x46\xf1\xea\x04\xc8\x79\x26\x0c\xc7\x11\xed\xdc\x3f\x25\x12\x4c\xcb\x66\xf0\x18\x3a\x5b\x1a\x18\x77\xc6\xdc\x41\xbc\xfa\xc5\x21\x70\xaa\xa1\x96\x9f\x67\x2f\xfc\x0e\x98\x52\xa2\xb0\x7f\xa4\x43\x7f\x9a\xf3\x99\x8c\x21\x37\x6d\x0e\xf3\x30\xd9\x65\xaa\x15\xff\xa3\xf9\xcc\x5f\xf1\x63\x30\xe3\xdc\x98\x92\x9d\xc6\x7f\x49\xc8\x44\x6d\x33\x26\xcf\xb4\xa1\xce\xda\xb0\x0f\x52\xb8\xcd\xa8\x51\x31\xd1\x3d\x5d\xf9\x7f\xb2\xae\x17\xe8\x22\x00\xf5\xb8\xd5\x2e\x4b\xd2\x67\x0b\x3e\xb3\xa4\x46\x89\xab\x4e\xbe\xb7\xff\x46\xbc\x4c\xf8\x9b\xe4\x4d\xeb\x08\x79\x9e\x30\x6b\xd4\xed\x28\xfb\x2e\xe4\x71\x1a\xaf\x9d\xee\x10\xf2\x3c\x89\xf8\x70\xdd\xa9\xf7\x8f\x68\x18\xdc\x6c\x61\xb2\x8d\x99\x73\x13\x3b\x83\xf8\x92\x90\x5f\x3a\xf2\xd5\x21\x86\xe5\x81\x20\x9c\x57\x5d\xae\x46\xb5\xc2\xa4\x89\x98\x4f\x72\x2e\x45\x99\x15\xa1\xed\x29\x4e\x0b\x0c\xd1\xbc\xb2\x9d\xd3\x86\x37\x21\xff\xf3\x66\xd4\x73\x33\xdb\x2f\x95\xcd\xdf\x44\xe3\x35\x6b\xd5\xfd\x64\xe7\x50\xcf\xaa\x91\x6f\x37\xeb\xf9\xa0\x0d\x0a\x04\x59\x49\xde\x38\xef\x35\xc4\x3f\xcf\x0b\xfe\x66\x5c\xdb\x64\x3b\xc9\xb6\x78\xc3\xbf\xd8\x6b\xfe\x2a\xb6\xc3\x6c\x83\xd0\x96\x64\x2f\xba\x9b\xbe\x13\x30\xfe\x64\xab\x89\xf7\xfe\xbf\xaf\x81\x8e\xda\xbd\xf0\xb1\xe1\x5d\x30\x2e\x7b\x54\xc6\xe5\xf6\x77\xbc\xe4\x2f\xf6\x91\x4c\xb4\xbd\x47\xf7\xee\x10\xfb\xc8\x89\x76\x30\x24\x4c\x41\xdb\x3d\x93\xe5\xe2\x77\xfe\x38\xe7\x99\x31\x12\xb4\xee\x2a\x64\xfe\x5d\x9f\x34\x81\x31\xe1\x61\xb1\x07\x06\x8a\x3f\xee\x5f\x9f\xec\x2e\x62\xfe\x67\xda\x9a\x71\xfc\xff\x83\xfc\x2b\x8a\x05\xff\xa3\xcd\x60\x4c\x9c\x1a\xd8\xf9\x9f\x77\xbb\x32\xff\x67\x68\xfe\x13\xa7\xc9\xe3\x0f\x84\xfe\xcf\x61\xbf\xad\xad\xb2\x84\xf9\x9f\x6d\x3f\x82\x7e\xc1\x64\xf1\x7f\xbf\x8e\x1f\xfd\x30\xf4\x43\xf4\x4b\xbe\x0f\x25\x2f\x6b\xd1\x0f\xfb\x1c\xec\xed\xc0\xa6\x75\x3c\x27\x84\xcd\xc1\x17\x1c\x5d\xfe\xf2\xd8\x88\x3f\xf9\x52\xd4\xae\x7c\x7e\x81\xaf\x57\x2f\x5f\x84\xc2\x17\x17\xa3\x6f\x7c\x3f\x63\x74\xf0\x87\x47\x89\xbf\xb0\x3b\x19\x3f\x91\xe0\x90\xf9\x7d\xe6\x79\xdd\x66\x83\x8a\xbf\xac\x86\xe3\xb5\x1f\xf2\xfd\xe9\xc6\x83\x88\x6d\x92\xbb\xf3\xe0\x3e\xff\x64\xa1\x73\xd9\xb1\xf7\x42\xd9\xab\xe9\xd0\xdf\x7b\x99\xf9\x75\x54\x57\xc0\x96\x68\x09\x4a\x5f\x49\x55\x9e\xd5\x9b\x36\xb1\x6d\x1c\x12\x13\xf8\xc4\xdf\x9c\x12\x21\xe2\x8e\xf8\x30\x5c\xeb\x4d\xcc\x87\x7c\xe8\x82\xe7\x16\xa0\xdd\x9f\x81\x31\xcc\xd7\x99\x2f\x35\x6b\xff\x55\x28\x7f\xed\x17\xbc\x27\x71\x5c\x31\xb2\x2e\xb8\xcd\xdf\xbe\xde\x1b\x0b\xb2\x14\x7d\xab\x79\x7f\x03\xfb\xe4\xe4\x13\xdb\xb1\xfd\x5b\xd6\x89\xf3\xc7\xdb\xf0\xd9\x0f\x19\x1b\xed\xd1\x5e\xf3\x97\x63\x16\x1a\xcb\xce\xd7\x9f\x65\x3f\x9f\xda\xa7\x1f\x57\x41\xd6\x82\x6f\x2a\x31\x0b\xaf\x89\xd8\x10\x9e\x87\x81\x2b\xbd\xfc\xce\x91\x72\x0b\xef\x11\x66\xe7\xd8\xca\x03\xfe\x2a\xc6\x4e\x31\x4f\xce\x33\xf7\xf3\x1a\xb7\xcb\xbd\xf0\x85\x58\xa1\xe7\xba\x68\x79\x8e\x65\x9b\x80\xba\x59\x6f\xda\xac\xe8\x66\xe5\x86\x57\x1c\x62\x8d\x61\xf3\xe0\x9a\x3f\xc5\x4d\xc8\x5f\x8f\x3a\x77\xf4\xc3\xb2\xe1\x72\x1f\xfa\x4d\x59\xdf\x69\x1e\x28\x2e\xe3\x35\x79\xa9\x07\x63\xac\x44\x7c\xf6\x90\x63\x7c\xe7\x16\x7f\x1e\xfb\xd2\x87\x61\xdb\xf3\x8b\xe0\x04\xc6\x6c\x5d\xad\x8d\xd0\x5c\x6a\xc6\x6f\x3d\xa0\xe0\x1b\x26\x2f\x94\x87\x7e\x31\xda\xa6\xdf\xe9\xe0\x64\xfd\x01\xdc\x97\x0f\x23\xde\xbf\xe2\xb3\xd0\x1b\xe9\x81\x5b\xfa\x47\xba\x9f\x13\x77\x1f\xea\xc0\x77\x59\x16\xec\x67\x8d\x68\xe3\xed\x73\x36\x0d\xdf\xbf\x0b\xb2\x9f\xbe\x9b\x75\x50\xc8\xc6\x43\xf9\x3b\xe8\xa0\x5d\xbe\x3c\x06\x77\xf6\x17\xe2\xa7\x15\xef\xf2\x9e\xe8\xab\xfd\xe1\xef\x45\x78\xb2\xb7\x29\xb9\x02\x17\x7d\x7c\xf0\x7f\x47\x85\x14\xfe\xf8\xbb\xe7\x16\xf3\xe7\xf8\xcb\x24\xc7\x5f\x26\x11\x87\xfb\x8d\x8c\x74\x95\xe3\x2f\xbc\xaf\x46\xea\xa7\x58\x88\xe2\xfe\x82\x54\xff\x13\xc5\x9e\x24\xef\xf2\x15\xd1\x14\x73\x36\x60\x2c\x58\x87\xe3\x6f\x47\x1c\xad\x78\x0d\x14\x35\x71\x5e\x42\xab\x36\xf8\x9a\x67\xf0\xb5\x51\x9e\x62\x3a\x52\x8a\xe4\x3a\x4f\x61\xd4\x44\x7c\x2f\x3f\x45\x1d\x9a\xbb\x3c\xf2\xde\xf1\x44\xc6\x64\x55\xa8\x51\x37\x6b\x22\xce\x6f\x07\x52\x1f\xad\x37\x94\xff\xa5\x71\x42\xdd\xbc\x36\xb5\xea\x7c\x5c\xab\xdd\x94\xe3\xa2\x7b\xca\x73\x8d\x07\x22\x5b\x53\x92\x16\x85\xeb\x4c\x5d\x4e\x39\x6d\xf9\x99\x2d\xc0\xb6\xce\x27\x3b\x59\x88\xb6\x09\x6d\x56\x19\xfe\x3e\x7b\x0b\xec\xb4\xaf\x64\x13\x79\xa6\x20\xfe\xff\x4a\xfc\xe8\xe3\x70\x0e\x10\x63\x00\x8e\x3b\x3d\xf1\x91\x6e\x35\x7e\xc4\x6e\x48\x98\xca\xb9\x8c\xac\xf9\x77\x60\x1c\x77\x07\x18\x93\x1e\x1d\xed\x31\xf8\x07\x3f\x61\x47\x3f\xbb\x68\x55\x3c\x54\xbf\xbb\x0e\xf6\xff\x73\x2d\x54\x21\x59\x7e\x19\x33\xda\x63\xf0\x0b\x7e\xd2\x95\xac\xf9\xdf\x80\xda\x2d\x1b\xc0\xb1\xed\xfe\xf3\x8b\x1c\xc3\x78\x99\x53\x0e\x2c\xfe\x05\x13\xa1\x66\xd3\x3a\x11\x6f\x5e\xbf\x4e\x7f\x60\xd7\x9f\x9e\xe7\xdc\xf0\x0d\xe2\xbd\xb1\x89\x7f\xf3\xfa\x41\xfc\x30\x9e\xf1\x43\x10\x7f\x10\x7f\x10\xff\xb8\xc2\xff\xad\x21\xf6\x07\xed\xff\x1b\x2f\x70\x7e\x7b\xcc\xdb\x7f\x5d\x34\x64\x2d\xbc\x0b\x0e\xbc\xf7\xe6\xe0\xe6\x45\xf6\x7f\xcd\xb3\xa0\x8f\x9b\x3c\xc6\xe5\x2f\xd7\x10\x9f\x92\xe0\x60\xe6\x5b\x4a\xbe\x94\xda\x9e\x75\x2f\x41\xf6\xa2\x7b\xe4\x1a\xc2\xd8\xc4\x4f\x79\x40\xf2\x71\xf2\xd2\x1f\x87\x8b\x5d\x9f\x31\x6e\x9b\xd5\xca\xd7\xb3\xed\x2d\x5c\x0b\x75\x9d\xa7\xbc\xc5\xf8\xb9\x7e\xfa\x25\x38\x56\xb5\x53\x60\xbf\x76\xcd\x69\x0d\x50\x9e\x37\x33\xe6\xff\x87\x9e\x4b\x1a\x03\xf8\x49\x6f\x66\xa3\xdf\x76\x27\xec\x7b\xeb\x8f\x4e\x98\xa9\xe6\x70\x6d\xa0\x5f\x59\x0a\x15\x6b\x57\x39\xe8\x91\x5b\xf5\x30\xbf\xe3\x17\xb9\xe9\x47\x20\x2f\xed\x31\xe8\x3d\x7f\x46\xc1\xda\xd7\x73\x01\x4c\x49\x53\xe1\xd4\xa1\x1a\xe5\xd9\xc5\xae\xd3\x9c\xe7\x10\x35\x14\xb7\x6b\x8a\x7e\xc5\x4f\xfa\x40\x35\x8e\x8e\x03\x15\xb2\xde\x08\x9d\xaf\xdb\xba\x91\xcf\x76\x95\xfe\x56\xab\xd4\x68\xa8\xb5\xef\xdb\xc1\xef\xfb\xa8\x47\xa3\x80\x5f\xb6\x37\x31\xb7\x43\xd5\xdb\x6b\x04\x76\x9b\xd0\x79\xaa\x6b\x50\x6d\x21\x2f\xfd\x09\xae\xdb\x35\xe4\x6d\x71\xb2\x47\xfb\xff\xf1\x3a\xf6\xbb\xcd\x9d\x7a\x9e\xdf\xf0\xb3\xde\x24\x4c\x03\xcb\xca\xb9\xd0\x27\xd7\x5b\xed\xf2\xa7\x7a\xa4\x7e\xf1\x24\x39\xf6\xa5\x33\x29\xa1\x4a\xad\x4a\xe8\x56\x37\x14\x60\x4c\x96\xb3\x74\x8a\xb7\x7b\x82\xef\xf8\x75\xb4\xd7\xde\x09\x27\xeb\xab\x9d\x6c\xe5\xe1\xa2\x1c\xa1\x1f\x24\xdb\x64\x7b\xfd\x68\x12\x94\xfd\x3e\x0d\x6c\x03\x03\xca\x18\x3e\x6b\x3c\x08\xd9\x54\xef\xe3\x7a\x5b\x60\xf1\x93\xee\xd2\x99\xc9\xba\xad\x7f\x73\xd2\x79\xb2\x37\x86\xf8\x30\xf1\x9e\x62\xe7\xe5\x1a\xf5\x5c\x09\xfe\x65\xc9\x70\xb2\xad\xf5\xc6\xf7\xe4\xfa\xbc\xc7\x7a\xe4\x35\x7e\x7b\x0d\xaf\x68\x55\x1c\x0c\x5c\xb9\x3c\xe8\x26\xa0\xee\x97\xbf\xb6\x12\xb2\x63\x43\x86\xdb\x47\xb9\x6e\x94\xb3\x64\x12\xef\x65\x8a\xae\x59\x07\xa0\xec\x0f\xe9\xc2\xb7\xf0\x6c\x1e\x7c\xc0\x1f\x05\xfa\xa7\xef\x81\xce\xe6\x7a\xc6\x70\x4d\xd6\x89\xa6\xed\x46\x97\xb2\x64\x3d\x42\x1f\x8e\xf5\xc8\x3a\xa8\x47\x74\xde\x95\xce\xa9\x78\xb8\x37\x7b\x81\xdf\x6e\x6f\xbe\x0c\x1f\xe9\xdf\x76\xd2\xf9\xee\x93\xc7\xc4\x59\x95\x9b\xd4\x31\xed\xfe\x51\x63\x41\xa6\x18\xbb\x3c\x8e\x23\x3b\x2d\x0e\x63\xf7\x0f\x7e\x92\x5f\x76\x6c\x28\x14\xfd\x6a\x89\xa2\x37\x4a\x7e\x61\xcd\x73\x72\x7e\xe4\x26\x3a\x20\xeb\x91\x21\xfe\x01\x38\xd7\xd1\xea\x24\x83\x8a\x37\x57\x73\x0d\xdb\xcd\xbd\xd9\x33\xfc\xf2\x19\x6d\x93\x66\x26\xce\x77\x3b\x38\xb6\xe6\x12\x93\xb0\xe5\x6e\xee\x47\x14\x03\x50\x9d\xbf\xec\xd5\x34\x5e\x33\xf6\xd6\xdf\x7b\x09\x65\x13\xc7\xb9\x3b\x17\xe7\x1b\xbc\xc2\x4f\xdf\xcb\x89\x7f\x10\xf7\x52\x0d\xb4\xed\x29\x82\x23\xe5\xf9\xd0\xba\x6b\x1b\x34\x15\xeb\xf9\x0c\xb2\x38\x63\xe5\xc1\x1a\x62\x9b\x1a\x0a\x55\xef\xbc\x01\x6d\x95\xdb\xa1\xa5\xcc\x0c\xed\x7b\x4b\xa1\x72\xfd\x6f\xe4\x38\x61\x74\xf1\xdb\xe7\x80\xfc\x63\xda\x4f\xe9\x0c\x06\xd3\xbc\xaf\x7a\x7a\x3e\x4b\x59\x0b\x84\x91\xce\xde\x88\xef\xdd\xc6\x7b\x86\x61\xe9\x43\xee\x9e\xb5\xf2\xce\xfe\xd0\xf9\x0b\xce\x29\x8f\x4e\x6e\x99\xe6\x61\xf0\x5b\xb3\x3d\x39\x27\x16\xcc\xff\x07\xf1\x07\xf1\x07\xf1\x07\xf1\xfb\x8a\x5f\x1b\xde\x25\x9f\xf3\xe1\x33\x38\xe3\x81\x10\xab\x38\x27\xa4\x55\x97\xe0\xef\xde\x40\x9e\x13\x1a\x0d\xca\x97\xcf\x19\xa1\xbf\x5b\x69\xd6\xaa\xcb\x91\x1a\x72\xb5\xea\x8f\xc6\x11\xd5\x99\x53\xc2\x5b\x73\x53\xd4\x1b\x03\x73\x1a\x29\xd8\x46\x6a\xff\x09\x00\x00\xff\xff\x5a\xe5\x5c\x6b\xee\x3a\x00\x00")

func public_img_favicon_ico_bytes() ([]byte, error) {
	return bindata_read(
		_public_img_favicon_ico,
		"public/img/favicon.ico",
	)
}

func public_img_favicon_ico() (*asset, error) {
	bytes, err := public_img_favicon_ico_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "public/img/favicon.ico", size: 15086, mode: os.FileMode(420), modTime: time.Unix(1410970863, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/base.ace": views_base_ace,
	"views/top/index.ace": views_top_index_ace,
	"public/css/all.min.css": public_css_all_min_css,
	"public/css/style.css": public_css_style_css,
	"public/css/style.styl": public_css_style_styl,
	"public/img/favicon.ico": public_img_favicon_ico,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"public": &_bintree_t{nil, map[string]*_bintree_t{
		"css": &_bintree_t{nil, map[string]*_bintree_t{
			"all.min.css": &_bintree_t{public_css_all_min_css, map[string]*_bintree_t{
			}},
			"style.css": &_bintree_t{public_css_style_css, map[string]*_bintree_t{
			}},
			"style.styl": &_bintree_t{public_css_style_styl, map[string]*_bintree_t{
			}},
		}},
		"img": &_bintree_t{nil, map[string]*_bintree_t{
			"favicon.ico": &_bintree_t{public_img_favicon_ico, map[string]*_bintree_t{
			}},
		}},
	}},
	"views": &_bintree_t{nil, map[string]*_bintree_t{
		"base.ace": &_bintree_t{views_base_ace, map[string]*_bintree_t{
		}},
		"top": &_bintree_t{nil, map[string]*_bintree_t{
			"index.ace": &_bintree_t{views_top_index_ace, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

